import express from 'express';
import {Markup, Telegraf, session, Scenes} from 'telegraf';
import { SERVER_PORT } from "./src/configs/configs.js";
import { TELEGRAM_BOT_TOKEN } from "./src/configs/configs.js";
import {sequelize} from "./src/configs/db.js";
import {chooseCategory} from "./src/wizards/choose-category.js";
import {createService} from "./src/wizards/create-service.js";
import {findService} from "./src/wizards/find-service.js";
import {managerComposer, manageServices} from "./src/wizards/manage-services.js";
import {sendMarkdownMessageAndSave} from "./src/utils/clearChat.js";
import {startMenuButtons} from "./src/configs/common.js";

const app = express();
app.use(express.json());

app.listen(SERVER_PORT, async () => {
    console.log(`Express server is running on http://localhost:${SERVER_PORT}`);
});


(async () => {
    await sequelize.sync();
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
})();

const currentScenes = [chooseCategory, createService, findService, manageServices];

const bot = new Telegraf(TELEGRAM_BOT_TOKEN);
const stage = new Scenes.Stage(currentScenes);
export const botMessages = new Map();
bot.use(session())
    .use(stage.middleware())
    .use(managerComposer)
    .launch();

bot.start(async (ctx) => {
    await sendMarkdownMessageAndSave(
        ctx,
        `üëã –í—ñ—Ç–∞—î–º–æ —É –ë—ñ—Ä–∂—ñ –ü–æ—Å–ª—É–≥ ‚Äì –∑—Ä—É—á–Ω—ñ–π –±—ñ—Ä–∂—ñ –ø–æ—Å–ª—É–≥ —É –§—Ä–∞–Ω—Ü—ñ—ó\\! ü§ù\n\n–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ:\nüîπ –ó–Ω–∞–π—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞ –¥–ª—è –±—É–¥—å\\-—è–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å\\.\nüîπ –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Å–≤–æ—ó –ø–æ—Å–ª—É–≥–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤\\.\nüîπ –ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –æ–ø–∏—Å–æ–º\\.`,
        Markup.keyboard(startMenuButtons).resize());
    await sendMarkdownMessageAndSave(
        ctx,
        `‚ú® –©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏:\n\n1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å —É –º–µ–Ω—é, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å: –∑–Ω–∞–π—Ç–∏ –ø–æ—Å–ª—É–≥—É –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å–ª—É–≥—É\\.\n2Ô∏è‚É£ –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é\\.\n3Ô∏è‚É£ –ß–µ–∫–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–±–æ –∑–Ω–∞—Ö–æ–¥—å—Ç–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\\!\n\nüöÄ –ë—ñ—Ä–∂–∞ –ü–æ—Å–ª—É–≥ ‚Äì –∑–Ω–∞–π–æ–º—Ç–µ—Å—å, —Å–ø—ñ–≤–ø—Ä–∞—Ü—é–π—Ç–µ, –¥–æ—Å—è–≥–∞–π—Ç–µ —Ä–∞–∑–æ–º\\!`
    )
});

bot.hears(startMenuButtons[0][0], (ctx) => {
    ctx.scene.enter('choose-category', {action: 'create'})
});

bot.hears(startMenuButtons[0][1], (ctx) => {
    ctx.scene.enter('choose-category', {action: 'find'})
});

bot.hears(startMenuButtons[1], (ctx) => {
    ctx.scene.enter('manage-services')
});

bot.on('message', async (ctx) => {
    if (ctx.message.from.id === ctx.botInfo.id) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç–æ–º
        const chatId = ctx.chat.id;
        const messageId = ctx.message.message_id;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ Map
        if (!botMessages.has(chatId)) {
            botMessages.set(chatId, []);
        }
        botMessages.get(chatId).push(messageId);
    }
});
